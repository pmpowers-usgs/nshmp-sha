
apply plugin: 'jacoco'
apply plugin: 'war'
apply plugin: 'eclipse-wtp'

sourceCompatibility = 1.8
compileJava.options.encoding = 'UTF-8'

jacoco {
  toolVersion = '0.8.4'
}

repositories {
  jcenter()
}

dependencies {
  compile 'org.apache.tomcat:tomcat-catalina:8.0.45'
  compile 'javax.websocket:javax.websocket-api:1.1'
  compile 'com.amazonaws:aws-lambda-java-core:1.1.0'
  compile 'com.amazonaws:aws-java-sdk-lambda:1.11.461'
  compile 'com.amazonaws:aws-java-sdk-s3:1.11.579'
  compile 'com.amazonaws:aws-java-sdk-ec2:1.11.619'
  compile project(':nshmp-lib')

  testCompile 'junit:junit:4.12'
}

sourceSets {
  main {
    java {
      srcDirs = ['src']
    }
    resources {
      srcDirs = ['src']
      exclude '**/*.java'
    }
  }
  test {
    java {
      srcDirs = ['test']
    }
    resources {
      srcDirs = ['test']
      exclude '**/*.java'
    }
  }
}

ext {
  projectName = 'nshmp-haz'

  propsPath = '/classes/java/main/service.properties'
  
  /* Multi-model repository paths for version tracking */
  repo_cous_2008 = '../nshm-cous-2008'
  repo_cous_2014 = '../nshm-cous-2014'
  repo_cous_2014b = '../nshm-cous-2014b'
  repo_cous_2018 = '../nshm-cous-2018'
  repo_hi_2020 = '../nshm-hi-2020'
  repo_ak_2007 = '../nshm-ak-2007'
  
  /* Explicit model paths */
  model_wus_2008 = "${repo_cous_2008}/Western US"
  model_ceus_2008 = "${repo_cous_2008}/Central & Eastern US"
  model_wus_2014 = "${repo_cous_2014}/Western US"
  model_ceus_2014 = "${repo_cous_2014}/Central & Eastern US"
  model_wus_2014b = "${repo_cous_2014b}/Western US"
  model_wus_2018 = "${repo_cous_2018}/Western US"
  model_ceus_2018 = "${repo_cous_2018}/Central & Eastern US"
  model_hi_2020 = "${repo_hi_2020}"
  model_ak_2007 = "${repo_ak_2007}"

  /* Production models */
  prod_models = [
    [ model_ak_2007, 'models/ak/2007' ],
    [ model_ceus_2008, 'models/ceus/2008' ],
    [ model_wus_2008, 'models/wus/2008' ],
    [ model_ceus_2014, 'models/ceus/2014' ],
    [ model_wus_2014, 'models/wus/2014' ],
    [ model_wus_2014b, 'models/wus/2014b' ]
  ]

  /* Development models */
  dev_models = [
    [ model_ceus_2018, 'models/ceus/2018' ],
    [ model_wus_2018, 'models/wus/2018' ],
    [ model_hi_2020, 'models/hi/2020' ]    
  ]

  getGitTag = { gitDir -> 
    def cmd = 'git --git-dir=' + gitDir + '/.git describe --tags'
    return cmd.execute().text.replace('\n', '') ?: 'unknown'
  }

  /* 
   * The git-dir option gets the correct tag when
   * build is called from nshmp-haz-ws.
   */
  gitCommand = 'git --git-dir=../nshmp-haz/.git describe --tags'
  gitTag = gitCommand.execute().text.replace('\n', '') ?: 'unknown'
  gitLink = '<a href="https://github.com/usgs/nshmp-haz">' + gitTag +'</a>'
  propsPath = '/resources/main/app.properties'
  docTitle = projectName + ': ' + gitLink
  docFooter = '<div style="float: left; font-size: 16px; text-align: right; ' +
    'padding: 10px; width: 100%; box-sizing: border-box; background-color: #f9f9f9">' +
    '<b><a href="https://www.usgs.gov" target="_top">U.S. Geological Survey</a></b> ' + 
    '– National Seismic Hazard Model Project ' +
    '(<a href="https://earthquake.usgs.gov/hazards/" target="_top">NSHMP</a>) ' +
    '– <a href="https://github.com/usgs/nshmp-haz/blob/master/LICENSE.md" ' +
    'target="_top">License</a> | <b>' + gitLink + '</b></div>'
  docOut = findProperty('javadoc_loc')
  thinJar = false
}

test {
  filter {
    includeTestsMatching "gov.usgs.earthquake.nshmp.programs.*"
  }
}

jacocoTestReport {
  reports {
    xml.enabled true
    html.enabled true
  }
  afterEvaluate {
    classDirectories = files(classDirectories.files.collect {
      fileTree(
        dir: it,
        exclude: ['**/etc/**'])
      })
  }
}
check.dependsOn jacocoTestReport

javadoc {
  options.setUse(true)
  options.author(true)
  options.version(true)
  options.windowTitle(projectName)
  options.docTitle(docTitle)
  options.encoding('UTF-8')
  options.docEncoding('UTF-8')
  options.charSet('UTF-8')
  options.bottom(docFooter)
  options.addStringOption('Xdoclint:none', '-quiet')
  options.links(
    'https://docs.oracle.com/javase/8/docs/api/',
    'https://google.github.io/guava/releases/23.0/api/docs/',
    'https://google.github.io/gson/apidocs/')
  include 'gov/usgs/earthquake/nshmp/**'
  exclude 'gov/usgs/earthquake/nshmp/www/**'
  exclude 'gov/usgs/earthquake/nshmp/aws/**'
  exclude 'gov/usgs/earthquake/nshmp/etc/**'
  exclude 'gov/usgs/earthquake/nshmp/internal/**'
  exclude '**/Scratch*'
  doLast {
    if (docOut) {
      delete docOut
      copy {
        from 'build/docs/javadoc'
        into docOut
      }
      copy {
        from 'etc/resources/docs'
        into docOut + '/resources'
      }
    }
  }
}

/*
 * The default jar task automatically builds a fat jar and adds
 * a properties file with the application version. Note that
 * 'git describe' only works when running gradle from the command
 * line so version values in eclipse builds will empty. Use thinJar
 * task to skip dependencies.
 */
jar {
  doFirst {
    /* possible fat jar */
    if (rootProject.name == projectName && !thinJar) {
      from { configurations.compile.collect {
        it.isDirectory() ? it : zipTree(it).matching {
          exclude { it.path.contains('META-INF') }
        }
      }}
    }
    
    /* 
     * Possibly record app version. The creation of this file
     * on each build causes the classpath to appear changed so
     * Gradle reruns tests, even though no code has changed.
     */
    def props = new Properties()
    def propsFile = new File(project.buildDir.toString() + propsPath)
    if (propsFile.exists()) {
      props.load(propsFile.newReader())
    } else {
      propsFile.createNewFile()
    }
    if (!gitTag.equals(props.getProperty('app.version'))) {
      props.setProperty('app.version', gitTag)
      props.store(propsFile.newWriter(), null)
    }
  }
}

task thinJar(type: Jar) {
  doFirst {
    thinJar = true
  }
  with jar
}

/**
 * Create war file with production models
 */
war {
  enabled = true
  webAppDirName = 'webapp'
  
  /* 
   * Exclude existing models directory with symlinks
   * to support Eclipse deployments.
   */
  exclude 'models'

  prod_models.each{model ->
    from(model[0]) { into model[1] }
  }

  doFirst {
    /* Record service and model versions */
    writeProperties()
  }
}

/**
 * Create a war file with development models
 */
task assembleDev(type: War, dependsOn: 'war') {
  prod_models.each{model ->
    from(model[0]) { into model[1] }
  }

  dev_models.each{model ->
    from(model[0]) { into model[1] }
  }
}

/**
 * Create am exploded war file with production models
 */
task assembleUsgs(type: Sync) {
  into "${libsDir}/exploded-war"
  with war

  doFirst {
    /* Record service and model versions */
    writeProperties()
  }
}

/**
 * Create am exploded war file with development models
 */
task assembleUsgsDev(type: Sync) {
  into "${libsDir}/exploded-war"
  with assembleDev

  doFirst {
    /* Record service and model versions */
    writeProperties()
  }
}

/**
 * Create a zip file of all dependencies
 */
task dependencies(type: Zip) {
  baseName = "nshmp-haz-ws-dependencies"
  from {
    configurations.compile.collect {
      it
    }
  }

  into("java/lib")
  
  destinationDir libsDir
}

/**
 * Create properties file
 */
def writeProperties() {
  def props = new Properties()
  def propsFile = new File(project.buildDir.toString() + propsPath)
  propsFile.createNewFile()
  props.setProperty('app.version', getGitTag('.'))
  props.setProperty('E2007.version', getGitTag(repo_ak_2007))
  props.setProperty('E2008.version', getGitTag(repo_cous_2008))
  props.setProperty('E2014.version', getGitTag(repo_cous_2014))
  props.setProperty('E2014B.version', getGitTag(repo_cous_2014b))
  props.setProperty('E2018.version', getGitTag(repo_cous_2018))
  props.setProperty('E2020.version', getGitTag(repo_hi_2020))
  props.store(propsFile.newWriter(), null)
}
